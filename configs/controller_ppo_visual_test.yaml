# PPO Controller Configuration for Visual Testing Mode
# This configuration is for watching the RL agent learn with PyBoy display enabled

# Network architecture
network:
  hidden_size: 256
  num_layers: 3
  activation: "relu"
  use_orthogonal_init: true
  init_gain: 1.0

# PPO hyperparameters
ppo:
  learning_rate: 3e-4
  gamma: 0.99
  gae_lambda: 0.95
  clip_epsilon: 0.2
  value_loss_coeff: 0.5
  entropy_coeff: 0.01
  max_grad_norm: 0.5

  # Training schedule - MINIMAL for visual testing
  num_steps: 32   # Smaller rollouts for visual testing
  update_epochs: 2  # Fewer updates for faster visual feedback
  batch_size: 16  # Smaller batches

# Learning rate scheduling
lr_schedule:
  type: "constant"  # No decay for visual tests
  decay_steps: 1000
  min_lr: 3e-4

# Reward configuration for visual testing
rewards:
  # Core gameplay rewards
  rupee_reward: 0.05     # Higher rewards for visual feedback
  key_reward: 1.0        # Higher key reward to see collection behavior
  boss_defeat_reward: 5.0
  death_penalty: -5.0    # Higher penalty for visual clarity

  # Shaping rewards
  movement_reward: 0.01   # Higher movement reward to encourage exploration
  exploration_reward: 0.2 # Higher exploration reward
  time_penalty: -0.001   # Slightly higher time penalty

  # Health-based rewards
  health_loss_penalty: -0.2
  health_gain_reward: 0.3

  # Item collection rewards
  item_collection_reward: 0.5
  treasure_chest_reward: 1.0

  # Progress rewards
  dungeon_progress_reward: 2.0
  essence_collection_reward: 10.0

# Training configuration - VISUAL TEST MODE
training:
  total_timesteps: 1000    # Single short episode
  eval_frequency: 1000000  # No evaluation during visual test
  save_frequency: 1000000  # No saving during visual test
  log_frequency: 10       # Frequent logging for visual feedback

  # Episode management
  max_episode_steps: 1000  # Short episode for visual testing
  early_termination:
    health_zero: true
    stuck_threshold: 500   # Shorter stuck threshold

# Environment configuration - VISUAL MODE
environment:
  frame_skip: 2           # Slower frame skip for better visual observation
  action_repeat: 1
  observation_type: "vector"

  # State preprocessing
  normalize_observations: true
  clip_rewards: false
  reward_scaling: 1.0
  
  # Visual mode settings
  headless: false         # KEY: Enable PyBoy display window
  render: true           # Enable rendering
  fps_limit: 30          # Limit FPS for comfortable watching

# Planner integration - CONFIGURABLE
planner_integration:
  use_planner: false      # Default to pure RL for visual testing
  enable_visual: false    # Don't need visual processing for simple tests
  use_structured_entities: false
  auto_load_save_state: true
  
  # LLM settings (if enabled)
  planner_frequency: 50   # More frequent planning for visual feedback
  macro_timeout: 100     # Shorter timeouts
  override_on_low_health: true
  override_health_threshold: 0.3

# Exploration configuration - VISUAL FRIENDLY
exploration:
  epsilon_schedule:
    initial: 0.3      # Higher exploration for interesting visual behavior
    final: 0.1        # Keep some exploration
    decay_steps: 500  # Quick decay for visual test

  # Intrinsic motivation
  use_curiosity: true
  curiosity_coeff: 0.15

  # Random action injection - higher for visual interest
  random_action_prob: 0.15

# Logging and monitoring - VISUAL MODE
logging:
  wandb_project: "zelda-visual-test"
  tensorboard_dir: "logs/tensorboard/visual_test"
  log_video: false        # Don't record video, we're watching live
  video_frequency: 1000000

  # Metrics to track during visual test
  track_metrics:
    - "episode_reward"
    - "episode_length"
    - "actions_taken"
    - "player_position"
    - "health_changes"
    - "exploration_progress"

# Checkpointing - DISABLED for visual tests
checkpointing:
  save_dir: "checkpoints/visual_test"
  keep_last_n: 1
  save_optimizer: false

# Evaluation - SINGLE EPISODE
evaluation:
  num_episodes: 1
  deterministic: false    # Keep stochastic for interesting behavior
  render: true           # Enable rendering for evaluation

# Hardware configuration
hardware:
  device: "auto"
  num_workers: 1         # Single worker for visual testing
  pin_memory: false      # Not needed for single episode

# Visual testing specific settings
visual_test:
  mode: "enabled"
  description: "Visual testing mode with PyBoy display window"
  episode_limit: 1
  step_limit: 1000
  display_stats: true
  pause_on_episode_end: true
  
  # Control settings
  user_can_pause: true
  user_can_step: true
  show_action_info: true
  show_reward_info: true
